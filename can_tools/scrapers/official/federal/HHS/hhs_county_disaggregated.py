from datetime import timedelta

import numpy as np
import pandas as pd

from can_tools.scrapers.base import CMU
from can_tools.scrapers.official.federal.HHS.common import HHSDataset

COUNTY_POPULATION_DATA = (
    "https://media.githubusercontent.com/"
    "media/covid-projections/covid-data-public/main/data/misc/fips_population.csv"
)

COUNTY_HSA_MAPPING_DATA = (
    "https://seer.cancer.gov/seerstat/variables/countyattribs/Health.Service.Areas.xls"
)


def create_county_metadata() -> pd.DataFrame:
    """Create dataframe containing county description data.
    
    columns include:
        fips_code: County fips, 
        hsa: The HSA that the county belongs to, 
        population: County population, 
        hsa_population: total population of all counties within the HSA, 
        county_percent_pop: 
            The ratio of the county's population to the total HSA population (county pop / HSA pop)
    """
    county_pops = (
        pd.read_csv(COUNTY_POPULATION_DATA)
        .loc[:, ["fips", "population"]]
        .set_index("fips")
    )
    hsa = (
        pd.read_excel(COUNTY_HSA_MAPPING_DATA, sheet_name="HSA (NCI Modified)")
        .rename(columns={"HSA # (NCI Modified)": "hsa"})
        .loc[:, ["hsa", "FIPS"]]
        .set_index("FIPS")
    )

    # Combine the county and HSA data and calculate the needed columns. 
    return (
        county_pops.join(hsa)
        .reset_index()
        .assign(
            hsa_population=lambda x: (
                x["hsa"].map(x.groupby("hsa").sum()["population"].to_dict())
            ),
            county_percent_pop=lambda x: (x["population"] / x["hsa_population"]),
        )
        .rename(columns={"fips": "fips_code"})
    )


class HHSCountyDisaggregatedHospitalAdmissions(HHSDataset):
    has_location = True
    location_type = "county"
    provider = "hhs_can_estimates"

    variables = {
        # This column is generated by summing adult and pediatric admissions
        "previous_day_admission_covid_confirmed_7_day_sum": CMU(
            category="hospital_admissions_covid",
            measurement="new_7_day",
            unit="people",
        ),
    }

    @property
    def variable_names(self):
        return list(self.variables.keys())

    source = (
        "https://healthdata.gov/Hospital/COVID-19-Reported-Patient-Impact-and-Hospital-Capa/"
        "anag-cw7u"
    )
    source_url = (
        "https://healthdata.gov/api/views/anag-cw7u/rows.csv?accessType=DOWNLOAD"
    )

    def fetch(self):
        # return None
        data = pd.read_csv("hhs.csv")
        print("exiting detch")
        return data

    def normalize(self, data: pd.DataFrame) -> pd.DataFrame:
        # Set all missing values (-999999) to nan for all numeric columns and remove territories
        # as they are not included in HSAs
        numeric_cols = list(data.select_dtypes("number"))
        data.loc[:, numeric_cols] = data.loc[:, numeric_cols].where(
            lambda x: x > 0, np.nan
        )
        data = data.query("fips_code < 60_000")

        # NOTE: collection_week refers to the first day of the week, so add 6
        # days to get the last day.
        data.loc[:, "dt"] = pd.to_datetime(data["collection_week"]) + timedelta(days=6)

        # Combine pediatric and adult admissions into one variable.
        admissions = "previous_day_admission{}_covid_confirmed_7_day_sum"
        data[admissions.format("")] = data[admissions.format("_adult")] + data[
            admissions.format("_pediatric")
        ].fillna(0)

        # Add a column with the corresponding HSA for each county and remove unused columns.
        counties = create_county_metadata()
        data = data.merge(counties[["fips_code", "hsa"]], on="fips_code")
        data = data.loc[:, ["hsa", "dt"] + self.variable_names]

        # Sum facilities into hsa-level data.
        hsa_data = data.groupby(["hsa", "dt"]).sum().reset_index()

        # Disaggregate HSA level data to counties based on county populations.
        county_data = counties.merge(hsa_data, on="hsa")
        for var in self.variable_names:
            county_data[var] *= county_data["county_percent_pop"]

        return self._rename_or_add_date_and_location(
            data=county_data,
            location_column="fips_code",
            date_column="dt",
        ).pipe(self._reshape_variables, variable_map=self.variables)